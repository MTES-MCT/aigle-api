"""
Django settings for aigle project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from datetime import timedelta, datetime
import os
from pathlib import Path

from core.utils.parsing import strtobool

import logging  # noqa: F401
import logging_loki  # noqa: F401
from core.utils.logs import scaleway_logger  # noqa: F401

from celery import Celery  # noqa: F401

DEPLOYMENT_DATETIME = datetime.now()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-tz2s%wy_1typ8a6nh=(a51f64uknqo__79+0c^zi&y3q@b1!4$",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.environ.get("DEBUG", "false"))

if os.environ.get("ENVIRONMENT") == "development":
    GDAL_LIBRARY_PATH = os.environ.get(
        "GDAL_LIBRARY_PATH", "/opt/homebrew/opt/gdal/lib/libgdal.dylib"
    )
    GEOS_LIBRARY_PATH = os.environ.get(
        "GEOS_LIBRARY_PATH", "/opt/homebrew/opt/geos/lib/libgeos_c.dylib"
    )

SQL_ECHO = strtobool(os.environ.get("SQL_ECHO", "false"))
ENVIRONMENT = os.environ.get("ENVIRONMENT", "development")

BASE_HANDLERS = ["console"]

if ENVIRONMENT in ["production", "preprod"]:
    BASE_HANDLERS = ["console", "scaleway_loki"]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "colored": {
            "()": "colorlog.ColoredFormatter",
            "format": "{log_color}{levelname} {asctime} {name} {message}",
            "style": "{",
        }
        if ENVIRONMENT == "development"
        else {
            "format": "{levelname} {asctime} {name} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "colored" if ENVIRONMENT == "development" else "verbose",
        },
    },
    "root": {
        "handlers": BASE_HANDLERS,
        "level": "DEBUG" if ENVIRONMENT == "development" else "INFO",
    },
    "loggers": {
        "django": {
            "handlers": BASE_HANDLERS,
            "level": "INFO",  # Keep at INFO even in development
            "propagate": False,
        },
        "django.request": {
            "handlers": BASE_HANDLERS,
            "level": "DEBUG" if ENVIRONMENT == "development" else "WARNING",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": BASE_HANDLERS,
            "level": "WARNING",
            "propagate": False,
        },
        # Silence noisy Django loggers in development
        "django.utils.autoreload": {
            "handlers": BASE_HANDLERS,
            "level": "WARNING",  # Only show warnings/errors from autoreload
            "propagate": False,
        },
        "django.server": {
            "handlers": BASE_HANDLERS,
            "level": "INFO",  # Keep server logs but not debug
            "propagate": False,
        },
        "django.template": {
            "handlers": BASE_HANDLERS,
            "level": "WARNING",  # Silence template debug logs
            "propagate": False,
        },
        "django.security": {
            "handlers": BASE_HANDLERS,
            "level": "INFO",
            "propagate": False,
        },
        "aigle": {
            "handlers": BASE_HANDLERS,
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

if ENVIRONMENT in ["production", "preprod"]:
    LOGGING["handlers"]["scaleway_loki"] = {
        "class": "logging_loki.LokiHandler",
        "url": os.environ.get("SCW_COCKPIT_URL"),
        "tags": {
            "job": "django_api",
            "environment": ENVIRONMENT,
        },
        "auth": (
            os.environ.get("SCW_SECRET_KEY"),
            os.environ.get("SCW_COCKPIT_TOKEN_SECRET_KEY"),
        ),
        "version": "1",
    }

    LOGGING["handlers"]["mail_admins"] = {
        "level": "ERROR",
        "class": "django.utils.log.AdminEmailHandler",
        "include_html": True,
    }
    LOGGING["loggers"]["django.request"]["handlers"] = BASE_HANDLERS + ["mail_admins"]


ALLOWED_HOSTS = []

if os.environ.get("ALLOWED_HOSTS"):
    ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS").split(",")

# Application definition

DOMAIN = os.environ.get("DOMAIN")
SITE_NAME = os.environ.get("SITE_NAME", "Aigle")

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "corsheaders",
    "rest_framework",
    "rest_framework_gis",
    "core",
    "djoser",
    "django_filters",
    "debug_toolbar",
    "simple_history",
]

EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND")
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL")

DJOSER = {
    "PASSWORD_RESET_CONFIRM_URL": "reset-password/{uid}/{token}",
    "LOGIN_FIELD": "email",
    "SERIALIZERS": {
        "current_user": "core.serializers.user.UserSerializer",
    },
    "PERMISSIONS": {
        "user_create": ["djoser.permissions.CurrentUserOrAdmin"],
    },
}

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "core.middlewares.logs.RequestLoggingMiddleware",
]

# debug toolbar only showed in dev mode

INTERNAL_IPS = [
    "127.0.0.1",
]


# extra middlewares
extra_delay_request = int(os.environ.get("EXTRA_DELAY_REQUEST", "0"))

if extra_delay_request:
    MIDDLEWARE.append("common.middlewares.delay.DelayMiddleware")

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = "aigle.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "aigle.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

AUTH_USER_MODEL = "core.User"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
PASSWORD_MIN_LENGTH = 8
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": PASSWORD_MIN_LENGTH,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# REST framework

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    # by default, all endpoints needs authentication header
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
        # Any other parsers
    ),
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}
SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("JWT",),
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=180),
    "UPDATE_LAST_LOGIN": True,
}

CORS_EXPOSE_HEADERS = [
    "content-disposition",
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "fr"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# Celery Configuration
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# Optional: Task routing
CELERY_ROUTES = {
    "myapp.tasks.run_management_command": {"queue": "management_commands"},
}
